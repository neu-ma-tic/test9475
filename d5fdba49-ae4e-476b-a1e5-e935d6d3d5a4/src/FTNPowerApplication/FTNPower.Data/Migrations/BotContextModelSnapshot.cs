// <auto-generated />
using System;
using FTNPower.Data.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FTNPower.Data.Migrations
{
    [DbContext(typeof(BotContext))]
    partial class BotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0-preview2.19525.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FTNPower.Data.Tables.BlackListGuild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("Until")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BlackListGuilds");
                });

            modelBuilder.Entity("FTNPower.Data.Tables.BlackListUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("Until")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BlackListUsers");
                });

            modelBuilder.Entity("FTNPower.Data.Tables.DiscordServer", b =>
                {
                    b.Property<string>("TempId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.ToTable("DiscordServer");
                });

            modelBuilder.Entity("FTNPower.Data.Tables.FortniteUser", b =>
                {
                    b.Property<string>("TempId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.ToTable("FortniteUser");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.BotConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Developing")
                        .HasColumnType("bit");

                    b.Property<bool>("LogCommandUsages")
                        .HasColumnType("bit");

                    b.Property<bool>("LogUserMessages")
                        .HasColumnType("bit");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shards")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variables")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BotConfigs");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.DiscordServer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("AutoRemoveRequest")
                        .HasColumnType("bit");

                    b.Property<string>("CustomPrefix")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<byte>("DefaultGameMode")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsInitialized")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastMassUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("PVEDecimals")
                        .HasColumnType("bit");

                    b.Property<string>("RestrictedRoleIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.EpicIdVerifyOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VerifyOrders");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.FortniteAuthToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("access_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("account_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("app")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("client_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("client_service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("device_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expires_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("expires_in")
                        .HasColumnType("int");

                    b.Property<string>("in_app_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("internal_client")
                        .HasColumnType("bit");

                    b.Property<int>("refresh_expires")
                        .HasColumnType("int");

                    b.Property<DateTime>("refresh_expires_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("refresh_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FortniteAuthTokens");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.FortnitePVEProfile", b =>
                {
                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("AccountPowerLevel")
                        .HasColumnType("float");

                    b.Property<int>("CollectionBookLevel")
                        .HasColumnType("int");

                    b.Property<int>("CommanderLevel")
                        .HasColumnType("int");

                    b.Property<bool>("EliteFortnite2019")
                        .HasColumnType("bit");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<int>("NumMythicSchematics")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EpicId");

                    b.ToTable("FortnitePVEProfiles");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.FortnitePVPProfile", b =>
                {
                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PvpWinDuo")
                        .HasColumnType("int");

                    b.Property<int>("PvpWinSolo")
                        .HasColumnType("int");

                    b.Property<int>("PvpWinSquad")
                        .HasColumnType("int");

                    b.HasKey("EpicId");

                    b.ToTable("FortnitePVPProfiles");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.FortniteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("GameUserMode")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsValidName")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("NameTag")
                        .HasColumnType("bit");

                    b.Property<bool>("VerifiedProfile")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FortniteUsers");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.GuildConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Admin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.NameState", b =>
                {
                    b.Property<string>("DiscordServerId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FortniteUserId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("InQueue")
                        .HasColumnType("bit");

                    b.Property<bool>("LockName")
                        .HasColumnType("bit");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("DiscordServerId", "FortniteUserId");

                    b.HasIndex("FortniteUserId");

                    b.ToTable("NameStates");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.PaypalTxn", b =>
                {
                    b.Property<string>("TxnId")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("DiscordUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TxnId");

                    b.ToTable("PaypalTransactions");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.PriorityTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(21)")
                        .HasMaxLength(21);

                    b.Property<string>("AdvertCustomText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AdvertOn")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Deadline")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<string>("PromoteCreatorCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PriorityTables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("FTNPower.Model.Tables.NameState", b =>
                {
                    b.HasOne("FTNPower.Data.Tables.DiscordServer", "DiscordServer")
                        .WithMany("NameStates")
                        .HasForeignKey("DiscordServerId")
                        .HasPrincipalKey("TempId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FTNPower.Data.Tables.FortniteUser", "FortniteUser")
                        .WithMany("NameStates")
                        .HasForeignKey("FortniteUserId")
                        .HasPrincipalKey("TempId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
